// ----------------------------------------------------------------------------
// User Testbench Interface Header
//
//    HLS version: 2023.1_2/1049935 Production Release
//       HLS date: Sat Jun 10 10:53:51 PDT 2023
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: ajh9498@hansolo.poly.edu
// Generated date: Thu Apr 24 07:23:52 EDT 2025
//
// ----------------------------------------------------------------------------

#ifndef CCS_TESTBENCH_H
#define CCS_TESTBENCH_H

#include <ac_int.h>
#include <ac_fixed.h>
#include "mc_wait_ctrl.h"
#include <string.h>
#include <iostream>

class testbench
{
   public:
   int argc;
   char** argv;
   int main(); //CCS_MAIN
   static bool enable_idle_sync_mode;
   static unsigned short idle_sync_stable_cycles;
   static void set_enable_stalls(bool flag);
   static void reset_request();
   static bool _dut_inst;
   static bool dut_inst();
   static bool set_dut_inst( bool _inst );
   static bool input_real_m_ignore;
   static bool input_real_m_skip;
   static bool input_real_m_skip_quiet;
   static bool input_real_m_skip_once;
   static bool input_real_m_skip_noerr;
   static int  input_real_m_array_comp_first;
   static int  input_real_m_array_comp_last;
   static mc_wait_ctrl input_real_m_wait_ctrl;
   static bool input_real_e_ignore;
   static bool input_real_e_skip;
   static bool input_real_e_skip_quiet;
   static bool input_real_e_skip_once;
   static bool input_real_e_skip_noerr;
   static int  input_real_e_array_comp_first;
   static int  input_real_e_array_comp_last;
   static mc_wait_ctrl input_real_e_wait_ctrl;
   static bool input_imag_m_ignore;
   static bool input_imag_m_skip;
   static bool input_imag_m_skip_quiet;
   static bool input_imag_m_skip_once;
   static bool input_imag_m_skip_noerr;
   static int  input_imag_m_array_comp_first;
   static int  input_imag_m_array_comp_last;
   static mc_wait_ctrl input_imag_m_wait_ctrl;
   static bool input_imag_e_ignore;
   static bool input_imag_e_skip;
   static bool input_imag_e_skip_quiet;
   static bool input_imag_e_skip_once;
   static bool input_imag_e_skip_noerr;
   static int  input_imag_e_array_comp_first;
   static int  input_imag_e_array_comp_last;
   static mc_wait_ctrl input_imag_e_wait_ctrl;
   static bool taps_real_m_ignore;
   static bool taps_real_m_skip;
   static bool taps_real_m_skip_quiet;
   static bool taps_real_m_skip_once;
   static bool taps_real_m_skip_noerr;
   static int  taps_real_m_array_comp_first;
   static int  taps_real_m_array_comp_last;
   static mc_wait_ctrl taps_real_m_wait_ctrl;
   static bool taps_real_e_ignore;
   static bool taps_real_e_skip;
   static bool taps_real_e_skip_quiet;
   static bool taps_real_e_skip_once;
   static bool taps_real_e_skip_noerr;
   static int  taps_real_e_array_comp_first;
   static int  taps_real_e_array_comp_last;
   static mc_wait_ctrl taps_real_e_wait_ctrl;
   static bool taps_imag_m_ignore;
   static bool taps_imag_m_skip;
   static bool taps_imag_m_skip_quiet;
   static bool taps_imag_m_skip_once;
   static bool taps_imag_m_skip_noerr;
   static int  taps_imag_m_array_comp_first;
   static int  taps_imag_m_array_comp_last;
   static mc_wait_ctrl taps_imag_m_wait_ctrl;
   static bool taps_imag_e_ignore;
   static bool taps_imag_e_skip;
   static bool taps_imag_e_skip_quiet;
   static bool taps_imag_e_skip_once;
   static bool taps_imag_e_skip_noerr;
   static int  taps_imag_e_array_comp_first;
   static int  taps_imag_e_array_comp_last;
   static mc_wait_ctrl taps_imag_e_wait_ctrl;
   static bool return_real_m_ignore;
   static bool return_real_m_skip;
   static bool return_real_m_skip_quiet;
   static bool return_real_m_skip_once;
   static bool return_real_m_skip_noerr;
   static int  return_real_m_array_comp_first;
   static int  return_real_m_array_comp_last;
   static bool return_real_m_use_mask;
   static ac_fixed<11, 1, true, AC_TRN, AC_WRAP > return_real_m_output_mask;
   static mc_wait_ctrl return_real_m_wait_ctrl;
   static bool return_real_e_ignore;
   static bool return_real_e_skip;
   static bool return_real_e_skip_quiet;
   static bool return_real_e_skip_once;
   static bool return_real_e_skip_noerr;
   static int  return_real_e_array_comp_first;
   static int  return_real_e_array_comp_last;
   static bool return_real_e_use_mask;
   static ac_int<5, true > return_real_e_output_mask;
   static mc_wait_ctrl return_real_e_wait_ctrl;
   static bool return_imag_m_ignore;
   static bool return_imag_m_skip;
   static bool return_imag_m_skip_quiet;
   static bool return_imag_m_skip_once;
   static bool return_imag_m_skip_noerr;
   static int  return_imag_m_array_comp_first;
   static int  return_imag_m_array_comp_last;
   static bool return_imag_m_use_mask;
   static ac_fixed<11, 1, true, AC_TRN, AC_WRAP > return_imag_m_output_mask;
   static mc_wait_ctrl return_imag_m_wait_ctrl;
   static bool return_imag_e_ignore;
   static bool return_imag_e_skip;
   static bool return_imag_e_skip_quiet;
   static bool return_imag_e_skip_once;
   static bool return_imag_e_skip_noerr;
   static int  return_imag_e_array_comp_first;
   static int  return_imag_e_array_comp_last;
   static bool return_imag_e_use_mask;
   static ac_int<5, true > return_imag_e_output_mask;
   static mc_wait_ctrl return_imag_e_wait_ctrl;
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   static my_complex_float_t exec_fir(my_complex_float_t input, my_complex_float_t taps[32]);
   #endif
   explicit testbench(int _argc, const char* const *_argv)
      :argc(_argc), argv(const_cast<char**>(_argv))
   {
   }
   ~testbench()
   {
   }
   private:
   testbench() {}
};
extern void mc_testbench_reset_request();
extern bool mc_testbench_dut_inst();
extern bool mc_testbench_set_dut_inst( bool _inst );
extern void mc_testbench_wait_for_idle_sync();
extern void mc_testbench_input_real_m_skip(bool v);
extern void mc_testbench_input_real_e_skip(bool v);
extern void mc_testbench_input_imag_m_skip(bool v);
extern void mc_testbench_input_imag_e_skip(bool v);
extern void mc_testbench_taps_real_m_skip(bool v);
extern void mc_testbench_taps_real_e_skip(bool v);
extern void mc_testbench_taps_imag_m_skip(bool v);
extern void mc_testbench_taps_imag_e_skip(bool v);
extern void mc_testbench_return_real_m_skip(bool v);
extern void mc_testbench_return_real_e_skip(bool v);
extern void mc_testbench_return_imag_m_skip(bool v);
extern void mc_testbench_return_imag_e_skip(bool v);
#endif //CCS_TESTBENCH_H
